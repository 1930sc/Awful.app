default_platform :ios
XCODE_PROJECT = File.expand_path("../Xcode/Awful.xcodeproj")

before_all do
  fastlane_version "1.106.2"
  xcversion(version: "~> 8")
  
  DEFAULT_ENV = {
    "FL_BUILD_NUMBER_PROJECT" => XCODE_PROJECT,
    "FL_VERSION_NUMBER_PROJECT" => XCODE_PROJECT,
  }
  ENV.update(DEFAULT_ENV) { |name, old_val, new_val| old_val.nil? ? new_val : old_val }
end


desc "Build and upload a binary to iTunes Connect and release via TestFlight, bumping the build number too"
desc ""
desc "Options:"
desc "  skip_bump:true – don't bump the build number"
desc "  skip_gitclean:true - ignore dirty git repo"
desc "  skip_testflight:true - don't send to TestFlight"
desc "  skip_testflight_external:true - don't send to external TestFlight testers"
lane :beta do |options|
  
  ensure_git_status_clean unless options[:skip_gitclean]
  
  testflight_params = {
    distribute_external: !options[:skip_testflight_external]
  }
  if testflight_params[:distribute_external]
    testflight_params[:changelog] = prompt(
      text: "Change log: ",
      multi_line_end_keyword: "END")
  end
  
  major, minor = get_version_number_components
  
  unless options[:skip_bump]
    bump_build_number
  
    build_number = get_build_number
    beta_count = build_number.to_i % 100
  
    commit_version_bump(
      message: "Bump build number to #{build_number}.",
      xcodeproj: "Xcode/Awful.xcodeproj", # absolute path aka XCODE_PROJECT doesn't work here, gj
      force: options[:skip_gitclean])
    
    add_git_tag(
      tag: "#{major}.#{minor}-beta#{beta_count}",
      force: true)
  end

  xcargs = []  
  crashlytics_api_key = ENV["CRASHLYTICS_API_KEY"]
  if crashlytics_api_key
    xcargs << %Q[CRASHLYTICS_API_KEY="#{crashlytics_api_key}"]
  end
  
  app_group_entitlements
  
  gym(
    workspace: "Awful.xcworkspace",
    scheme: "Awful",
    configuration: "Release",
    output_directory: "build/",
    output_name: "Awful",
    xcargs: xcargs.join(" "))
  
  if crashlytics_api_key
    upload_symbols_to_crashlytics(api_token: crashlytics_api_key)
  end
  
  unless options[:skip_testflight]
    testflight(testflight_params)
  end
  
  reset_git_repo # reset .entitlements changes
  
  beta_count = get_build_number.to_i % 100
  add_git_tag(
    tag: "#{major}.#{minor}-beta#{beta_count}",
    force: true)
  
  push_to_git_remote
end


desc "Returns version number components [major, minor] as an array of integers"
private_lane :get_version_number_components do |options|
  
  parts = get_version_number
    .split(".")
    .map(&:to_i)
end


desc "Updates build number based on current major/minor version plus an increment"
private_lane :bump_build_number do |options|
  
  major, minor = get_version_number_components
  current_build_number = get_build_number.to_i
  
  lowest_matching_build_number = major * 10000 + minor * 100
  
  if current_build_number < lowest_matching_build_number
    increment_build_number(build_number: lowest_matching_build_number.to_s)
  else
    increment_build_number
  end
end


desc "Increments the minor version number by one"
desc ""
desc "Options:"
desc "  major:true – instead increments the major number by one and sets minor to 0"
private_lane :bump_version do |options|
  
  major, minor = get_version_number_components
  
  if options[:major]
    major += 1
    minor = 0
  else
    minor += 1
  end
  
  new_version = [major, minor].join(".")
  increment_version_number(version_number: new_version)
  
  commit_version_bump(
    message: "Bump version to #{new_version}",
    xcodeproj: "Xcode/Awful.xcodeproj") # absolute path aka XCODE_PROJECT doesn't work here, gj
end


desc "Increments the major version number by one and sets the minor version to 0"
lane :bump_major_version do
  bump_version(major: true)
end


desc "Increments the minor version number by one"
lane :bump_minor_version do
  bump_version
end


desc "Make the stickers 3x images"
desc "Should probably run this after running SmilieExtractor"
lane :embiggen_stickers do |options|
  sh File.join("..", "Xcode", "scale-stickers")
end


desc "Set up .entitlements files to use App Group"
desc "Requires file called app-group in repo root whose contents is the name of your App Group"
lane :app_group_entitlements do
  sh File.join("..", "Xcode", "gen-entitlements.sh")
end
